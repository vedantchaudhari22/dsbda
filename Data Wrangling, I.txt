 Data Wrangling, I 
Perform the following operations using Python on any open source dataset (e.g., data.csv) 
1. Import all the required Python Libraries. 
2. Locate an open source data from the web (e.g. https://www.kaggle.com). Provide a clear  
description of the data and its source (i.e., URL of the web site). 
3. Load the Dataset into pandas data frame. 
4. Data Preprocessing: check for missing values in the data using pandas insult(), describe() 
function to get some initial statistics. Provide variable descriptions. Types of variables 
etc. Check the dimensions of the data frame. 
5. Data Formatting and Data Normalization: Summarize the types of variables by checking 
the data types (i.e., character, numeric, integer, factor, and logical) of the variables in the 
data set. If variables are not in the correct data type, apply proper type conversions. 
6. Turn categorical variables into quantitative variables in Python. 
In addition to the codes and outputs, explain every operation that you do in the above steps and 
explain everything that you do to import/read/scrape the data set. 


import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

heart_data = pd.read_csv(r"D:\DSBDA\Lab File\Practical-1\heart.csv")

# Display the first few rows
print(heart_data.head())

heart_data.head()

heart_data.tail()

# Check for missing values
missing_values = heart_data.isnull().sum()
print("Missing Values:\n", missing_values)

# Check for missing values
missing_values = heart_data.isnull().sum()
print("Missing Values:\n", missing_values)

# Get the dimensions of the dataset
print("Dataset Dimensions:", heart_data.shape)

# Check data types
print(heart_data.dtypes)

# Convert 'cp' (chest pain) to categorical
heart_data['cp'] = heart_data['cp'].astype('category')

# Normalize numeric data
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
numeric_columns = ['age', 'trestbps', 'chol']
heart_data[numeric_columns] = scaler.fit_transform(heart_data[numeric_columns])

print(heart_data.head())


# One-hot encoding for categorical columns
heart_data_encoded = pd.get_dummies(heart_data, columns=['cp'], drop_first=True)

print(heart_data_encoded.head())

